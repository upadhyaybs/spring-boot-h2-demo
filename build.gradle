plugins {
    id 'org.springframework.boot' version '3.2.7'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'java'
    id 'jacoco'
    id 'org.sonarqube' version "5.1.0.4882"
}


group = 'com.tp'
version = '0.0.1-SNAPSHOT'

repositories {
    mavenLocal()
    mavenCentral()
}

ext {
    set('sonar.java.coveragePlugin', 'jacoco')
    set('sonar.coverage.jacoco.xmlReportPaths', layout.buildDirectory.dir('reports/jacoco/test/jacocoTestReport.xml'))
    set('sonar.exclusions', '**/domain/**,**/config/**,**/entity/**')
    set('sonar.coverage.exclusions', '**/domain/**,**/config/**,**/entity/**')
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    runtimeOnly 'com.h2database:h2'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'com.tngtech.archunit:archunit:1.2.2'
    testImplementation 'com.tngtech.archunit:archunit-junit5:1.2.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine'
    testImplementation 'org.junit.platform:junit-platform-launcher'
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testImplementation 'org.junit.vintage:junit-vintage-engine'
    testImplementation 'org.mockito:mockito-core'
    testImplementation 'org.hamcrest:hamcrest-library'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport // Generate the test report after tests run
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "**/config/*",
                    "**/domain/*",
                    "**/entity/*"

            ])
        }))
    }
}

sonarqube {
    properties {
        property 'sonar.sources', 'src/main/java'
        property 'sonar.tests', 'src/test/java'
        property 'sonar.java.binaries', 'build/classes/java/main'
        property 'sonar.sourceEncoding', 'UTF-8'
        property 'sonar.exclusions', '**/domain/*,**/config/*,**/entity/*'
        property 'sonar.coverage.exclusions', '**/domain/*,**/config/*,**/entity/*'
        property 'sonar.coverage.jacoco.xmlReportPaths', layout.buildDirectory.dir('reports/jacoco/test/jacocoTestReport.xml')
    }
}


tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
}
